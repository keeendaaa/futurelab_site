from django.db import models
from django.utils import timezone

# Create your models here.

class Product(models.Model):
    CATEGORY_CHOICES = [
        ("kanatohod", "–ö–æ–º–ø–ª–µ–∫—Å—ã –∫–∞–Ω–∞—Ç–æ—Ö–æ–¥"),
        ("bas", "–ú–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ë–ê–°"),
        ("fpv", "FPV-–î—Ä–æ–Ω—ã"),
        ("cargo", "–ì—Ä—É–∑–æ–≤—ã–µ –¥—Ä–æ–Ω—ã"),
        ("software", "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ"),
        ("champ", "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤"),
    ]
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ", max_length=200)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ")
    image = models.ImageField("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", upload_to="products/")
    category = models.CharField("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", max_length=100, choices=CATEGORY_CHOICES, blank=True, null=True, help_text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞")
    slug = models.SlugField("–°–ª–∞–≥", unique=True)
    video = models.FileField("–í–∏–¥–µ–æ", upload_to="product_videos/", null=True, blank=True)

    def __str__(self):
        return self.name

class News(models.Model):
    title = models.CharField("–ó–∞–≥–æ–ª–æ–≤–æ–∫", max_length=200)
    content = models.TextField("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ")
    image = models.ImageField("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", upload_to="news/", null=True, blank=True)
    published_date = models.DateTimeField("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", default=timezone.now)
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–∞", default=True)
    telegram_message_id = models.CharField("ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram", max_length=100, null=True, blank=True)
    emoji = models.CharField("–≠–º–æ–¥–∑–∏", max_length=10, default="üöÅ")  # –≠–º–æ–¥–∑–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞

    class Meta:
        verbose_name = "–ù–æ–≤–æ—Å—Ç—å"
        verbose_name_plural = "–ù–æ–≤–æ—Å—Ç–∏"
        ordering = ['-published_date']

    def __str__(self):
        return self.title

    def get_time_ago(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'X –¥. –Ω–∞–∑–∞–¥'"""
        delta = timezone.now() - self.published_date
        days = delta.days
        if days == 0:
            return "–°–µ–≥–æ–¥–Ω—è"
        elif days == 1:
            return "–í—á–µ—Ä–∞"
        else:
            return f"{days} –¥. –Ω–∞–∑–∞–¥"

class BotWhitelist(models.Model):
    chat_id = models.CharField(max_length=32, unique=True)
    first_name = models.CharField(max_length=255, blank=True, null=True, help_text="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (first_name)")
    last_name = models.CharField(max_length=255, blank=True, null=True, help_text="–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (last_name)")
    username = models.CharField(max_length=255, blank=True, null=True, help_text="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username)")
    added_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.chat_id

class CharacteristicSection(models.Model):
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞", max_length=200)

    class Meta:
        verbose_name = "–†–∞–∑–¥–µ–ª —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"
        verbose_name_plural = "–†–∞–∑–¥–µ–ª—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"

    def __str__(self):
        return self.name

class Characteristic(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name="characteristics", verbose_name="–ü—Ä–æ–¥—É–∫—Ç")
    section = models.ForeignKey(CharacteristicSection, on_delete=models.CASCADE, related_name="characteristics", verbose_name="–†–∞–∑–¥–µ–ª")
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", max_length=200)
    value = models.CharField("–ó–Ω–∞—á–µ–Ω–∏–µ", max_length=500)

    class Meta:
        verbose_name = "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞"
        verbose_name_plural = "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"

    def __str__(self):
        return f"{self.name}: {self.value}"

class ProductImage(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name="images", verbose_name="–ü—Ä–æ–¥—É–∫—Ç")
    image = models.ImageField("–§–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞", upload_to="product_gallery/")
    order = models.PositiveIntegerField("–ü–æ—Ä—è–¥–æ–∫", default=0)

    class Meta:
        verbose_name = "–§–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞"
        verbose_name_plural = "–ì–∞–ª–µ—Ä–µ—è –ø—Ä–æ–¥—É–∫—Ç–∞"
        ordering = ["order", "id"]

    def __str__(self):
        return f"–§–æ—Ç–æ –¥–ª—è {self.product.name} #{self.id}"
