import os
import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'futurelab_site.settings')
django.setup()

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from django.conf import settings
from .models import News, BotWhitelist
import requests
from io import BytesIO
from django.core.files import File
import re
import asyncio
from asgiref.sync import sync_to_async
from django.core.wsgi import get_wsgi_application
from django.utils import timezone

logger = logging.getLogger(__name__)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = '7260981978:AAH8z_hK4gtpvI4K71A-eQMkm6tRRitEsgM'
# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏
ADMIN_CHAT_ID = '1267841885'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Django
application = get_wsgi_application()

class TelegramBot:
    def __init__(self):
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("list", self.list_news_command))
        self.application.add_handler(CommandHandler("delete", self.delete_news_command))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        self.application.add_handler(MessageHandler(filters.PHOTO & filters.CAPTION, self.handle_photo_message))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏ –Ω–∞ —Å–∞–π—Ç–µ.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π\n"
            "/delete - —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å\n\n"
            "–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏:\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏\n"
            "2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é\n\n"
            "–§–æ—Ä–º–∞—Ç –Ω–æ–≤–æ—Å—Ç–∏:\n"
            "1. –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ)\n"
            "2. –û—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç - —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"
        )

    def extract_emoji(self, text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç–∞"""
        emoji_pattern = re.compile("["
            u"\U0001F600-\U0001F64F"  # emoticons
            u"\U0001F300-\U0001F5FF"  # symbols & pictographs
            u"\U0001F680-\U0001F6FF"  # transport & map symbols
            u"\U0001F1E0-\U0001F1FF"  # flags (iOS)
            u"\U00002702-\U000027B0"
            u"\U000024C2-\U0001F251"
            "]+", flags=re.UNICODE)
        
        match = emoji_pattern.match(text)
        if match:
            return match.group(0)
        return "üöÅ"  # –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —ç–º–æ–¥–∑–∏

    @sync_to_async
    def save_news(self, title, content, emoji, message_id, photo_bytes=None):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
        news = News(
            title=title,
            content=content,
            emoji=emoji,
            telegram_message_id=str(message_id)
        )
        
        if photo_bytes:
            image_file = File(BytesIO(photo_bytes), name=f"news_{message_id}.jpg")
            news.image.save(f"news_{message_id}.jpg", image_file, save=False)
        
        news.save()
        return news

    @sync_to_async
    def get_latest_news(self, limit=5):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        return list(News.objects.filter(is_active=True).order_by('-published_date')[:limit])

    @sync_to_async
    def delete_news(self, news_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
        try:
            news = News.objects.get(id=news_id)
            news.delete()
            return True
        except News.DoesNotExist:
            return False

    @sync_to_async
    def is_whitelisted(self, chat_id):
        return BotWhitelist.objects.filter(chat_id=str(chat_id)).exists()

    async def handle_photo_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
        if not await self.is_whitelisted(update.effective_chat.id):
            await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
            photo = await update.message.photo[-1].get_file()
            photo_bytes = await photo.download_as_bytearray()
            
            # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
            caption = update.message.caption or ""
            lines = caption.split('\n', 1)
            title = lines[0].strip()
            content = lines[1].strip() if len(lines) > 1 else ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–æ–¥–∑–∏
            emoji = self.extract_emoji(title)
            title = title.replace(emoji, "").strip()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç—å
            await self.save_news(title, content, emoji, update.message.message_id, photo_bytes)
            
            await update.message.reply_text("–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.")

    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not await self.is_whitelisted(update.effective_chat.id):
            await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        try:
            # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
            text = update.message.text
            lines = text.split('\n', 1)
            title = lines[0].strip()
            content = lines[1].strip() if len(lines) > 1 else ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–æ–¥–∑–∏
            emoji = self.extract_emoji(title)
            title = title.replace(emoji, "").strip()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç—å
            await self.save_news(title, content, emoji, update.message.message_id)
            
            await update.message.reply_text("–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.")

    async def list_news_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list"""
        if not await self.is_whitelisted(update.effective_chat.id):
            await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        news_list = await self.get_latest_news()
        if not news_list:
            await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
            return

        message = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n"
        for news in news_list:
            message += f"ID: {news.id}\n"
            message += f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {news.emoji} {news.title}\n"
            message += f"–î–∞—Ç–∞: {news.published_date.strftime('%d.%m.%Y %H:%M')}\n"
            message += f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {news.content[:100]}...\n\n"

        await update.message.reply_text(message)

    async def delete_news_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete"""
        if not await self.is_whitelisted(update.effective_chat.id):
            await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        news_list = await self.get_latest_news()
        if not news_list:
            await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        keyboard = []
        for news in news_list:
            keyboard.append([
                InlineKeyboardButton(
                    f"{news.emoji} {news.title[:30]}...",
                    callback_data=f"delete_{news.id}"
                )
            ])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()

        if not await self.is_whitelisted(update.effective_chat.id):
            await query.edit_message_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
            return

        if query.data.startswith("delete_"):
            news_id = int(query.data.split("_")[1])
            if await self.delete_news(news_id):
                await query.edit_message_text("–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
            else:
                await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏.")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("[News Bot] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    try:
        print("[News Bot] –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –±–æ—Ç–∞...")
        bot = TelegramBot()
        bot.run()
    except Exception as e:
        print(f"[News Bot] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise 